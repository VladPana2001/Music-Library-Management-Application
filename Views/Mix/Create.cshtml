@model Music_Library_Management_Application.Models.MixCreateViewModel

@{
    ViewData["Title"] = "Create Mix";
}

<h1>Create Mix</h1>

<form asp-action="Create" method="post" id="mixForm">
    <div class="form-group">
        <label asp-for="MixName" class="control-label"></label>
        <input asp-for="MixName" class="form-control" />
        <span asp-validation-for="MixName" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="MixDescription" class="control-label"></label>
        <textarea asp-for="MixDescription" class="form-control"></textarea>
        <span asp-validation-for="MixDescription" class="text-danger"></span>
    </div>

    <div class="row">
        <div class="col-md-6">
            <h3>Your Songs</h3>
            <ul class="list-group">
                @foreach (var song in Model.AllSongs)
                {
                    <li class="list-group-item">
                        @song.SongTitle
                        <button type="button" class="btn btn-success btn-sm float-right" onclick="addSongToMix(@song.Id, '@song.SongTitle', @Model.ConvertToSeconds(song.SongLenght))">+</button>
                    </li>
                }
            </ul>
        </div>
        <div class="col-md-6">
            <h3>Mix Songs</h3>
            <ul class="list-group" id="mixSongsList">
                @for (int i = 0; i < Model.MixSongs.Count; i++)
                {
                    var mixSong = Model.MixSongs[i];
                    var songLength = Model.AllSongs.FirstOrDefault(s => s.Id == mixSong.SongId)?.SongLenght ?? "0";
                    var maxLength = Model.ConvertToSeconds(songLength);
                    <li class="list-group-item">
                        @mixSong.Title
                        <input type="hidden" name="MixSongs[@i].SongId" value="@mixSong.SongId" />
                        <input type="hidden" name="MixSongs[@i].Order" value="@i" />
                        <div class="form-group">
                            <label>Trim Song</label>
                            <div id="slider-@i" data-max="@maxLength"></div>
                            <label>Start:</label>
                            <input type="number" class="form-control d-inline w-auto" name="MixSongs[@i].StartTime" id="start-input-@i" value="@mixSong.StartTime" />
                            <label>End:</label>
                            <input type="number" class="form-control d-inline w-auto" name="MixSongs[@i].EndTime" id="end-input-@i" value="@mixSong.EndTime" />
                        </div>
                        <div class="form-group">
                            <label>Fade In Duration (seconds):</label>
                            <input type="number" class="form-control d-inline w-auto" name="MixSongs[@i].FadeInDuration" value="@mixSong.FadeInDuration" />
                        </div>
                        <div class="form-group">
                            <label>Fade Out Duration (seconds):</label>
                            <input type="number" class="form-control d-inline w-auto" name="MixSongs[@i].FadeOutDuration" value="@mixSong.FadeOutDuration" />
                        </div>
                        <button type="button" class="btn btn-danger btn-sm" onclick="removeSongFromMix(this)">Remove</button>
                        <button type="button" class="btn btn-primary btn-sm" onclick="moveSongUp(this)">↑</button>
                        <button type="button" class="btn btn-primary btn-sm" onclick="moveSongDown(this)">↓</button>
                    </li>
                }
            </ul>
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Create Mix</button>
</form>

@section Scripts {
    <script>
        function addSongToMix(songId, songTitle, songLength) {
            const mixSongsList = document.getElementById('mixSongsList');
            const songCount = mixSongsList.childElementCount;

            const li = document.createElement('li');
            li.className = 'list-group-item';
            li.innerHTML = `
                                ${songTitle}
                                <input type="hidden" name="MixSongs[${songCount}].SongId" value="${songId}" />
                                <input type="hidden" name="MixSongs[${songCount}].Order" value="${songCount}" />
                                <div class="form-group">
                                    <label>Trim Song</label>
                                    <div id="slider-${songCount}" data-max="${songLength}"></div>
                                    <label>Start:</label>
                                    <input type="text" class="form-control d-inline w-auto" name="MixSongs[${songCount}].StartTime" id="start-input-${songCount}" value="0" />
                                    <label>End:</label>
                                    <input type="text" class="form-control d-inline w-auto" name="MixSongs[${songCount}].EndTime" id="end-input-${songCount}" value="${songLength}" />
                                </div>
                                <div class="form-group">
                                    <label>Fade In Duration (seconds):</label>
                                    <input type="number" class="form-control d-inline w-auto" name="MixSongs[${songCount}].FadeInDuration" value="0" />
                                </div>
                                <div class="form-group">
                                    <label>Fade Out Duration (seconds):</label>
                                    <input type="number" class="form-control d-inline w-auto" name="MixSongs[${songCount}].FadeOutDuration" value="0" />
                                </div>
                                <button type="button" class="btn btn-danger btn-sm" onclick="removeSongFromMix(this)">Remove</button>
                                <button type="button" class="btn btn-primary btn-sm" onclick="moveSongUp(this)">↑</button>
                                <button type="button" class="btn btn-primary btn-sm" onclick="moveSongDown(this)">↓</button>
                            `;
            mixSongsList.appendChild(li);
            initializeSlider(songCount, songLength);
        }

        function removeSongFromMix(button) {
            const li = button.parentElement;
            li.remove();
            updateMixSongOrder();
        }

        function moveSongUp(button) {
            const li = button.parentElement;
            const prevLi = li.previousElementSibling;
            if (prevLi) {
                li.parentElement.insertBefore(li, prevLi);
            }
            updateMixSongOrder();
        }

        function moveSongDown(button) {
            const li = button.parentElement;
            const nextLi = li.nextElementSibling;
            if (nextLi) {
                li.parentElement.insertBefore(nextLi, li);
            }
            updateMixSongOrder();
        }

        function updateMixSongOrder() {
            const mixSongsList = document.getElementById('mixSongsList');
            const mixSongs = mixSongsList.children;
            for (let i = 0; i < mixSongs.length; i++) {
                const orderInput = mixSongs[i].querySelector('input[name*=".Order"]');
                orderInput.value = i;
            }
        }

        function initializeSlider(index, max) {
            const slider = document.getElementById(`slider-${index}`);
            noUiSlider.create(slider, {
                start: [0, max],
                connect: true,
                range: {
                    'min': 0,
                    'max': max
                }
            });

            const startTimeInput = document.getElementById(`start-input-${index}`);
            const endTimeInput = document.getElementById(`end-input-${index}`);

            slider.noUiSlider.on('update', function (values, handle) {
                if (handle === 0) {
                    startTimeInput.value = Math.floor(values[0]);
                } else {
                    endTimeInput.value = Math.floor(values[1]);
                }
            });

            startTimeInput.addEventListener('change', function () {
                slider.noUiSlider.set([this.value, null]);
            });

            endTimeInput.addEventListener('change', function () {
                slider.noUiSlider.set([null, this.value]);
            });
        }

        document.addEventListener('DOMContentLoaded', function () {
            const sliders = document.querySelectorAll('[id^="slider-"]');
            sliders.forEach((slider, index) => {
                const max = slider.getAttribute('data-max');
                initializeSlider(index, max);
            });

            // Prevent form submission on Enter key press in any input
            const form = document.getElementById('mixForm');
            form.addEventListener('keydown', function (event) {
                if (event.key === 'Enter' && event.target.tagName === 'INPUT') {
                    event.preventDefault();
                }
            });
        });
    </script>
}
